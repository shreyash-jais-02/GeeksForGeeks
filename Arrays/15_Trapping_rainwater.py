"""
Link: 
https://www.geeksforgeeks.org/problems/trapping-rain-water-1587115621/1?page=1&category=Arrays&sortBy=submissions

Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 
 

Example 1:

Input:
N = 6
arr[] = {3,0,0,2,0,4}
Output:
10
Explanation: 
Bars for input {3, 0, 0, 2, 0, 4}
Total trapped water = 3+3+1+3=10

Example 2:

Input:
N = 4
arr[] = {7,4,0,9}
Output:
10
Explanation:
Water trapped by above 
block of height 4 is 3 units and above 
block of height 0 is 7 units. So, the 
total unit of water trapped is 10 units.
Example 3:

Input:
N = 3
arr[] = {6,9,9}
Output:
0
Explanation:
No water will be trapped.

Your Task:
You don't need to read input or print anything. The task is to complete the function trappingWater() which takes arr[] and N as input parameters and returns the total amount of water that can be trapped.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)


Constraints:
3 < N < 10^6
0 < Ai < 10^8
"""

class Solution:
    def trappingWater(self, arr,n):
        #Code here
        if not arr and n < 3:
            return -1
        left, right = 0, n-1
        left_max, right_max = 0, 0
        res = 0
        while left < right:
            left_max = max(left_max, arr[left])
            right_max = max(right_max, arr[right])
            
            if left_max < right_max:
                res += left_max - arr[left]
                left +=1
            else:
                res += right_max - arr[right]
                right -= 1
        return res